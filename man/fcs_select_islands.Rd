% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fcs_select_islands.R
\name{fcs_select_islands}
\alias{fcs_select_islands}
\title{Interactive DBSCAN-Based Island Selection in a 2D Embedding}
\usage{
fcs_select_islands(
  fcs_join_obj,
  reduction_cluster_annotate_algorithm = c("leiden", "flowsom", "louvain", "phenograph"),
  dbscan_reduction = c("umap", "tsne"),
  dbscan_minpts = 50,
  dbscan_eps = 0.5,
  dbscan_lineage = c("170Yb_CD3", "165Ho_CD19", "145Nd_CD4", "146Nd_CD8"),
  outdir = getwd()
)
}
\arguments{
\item{fcs_join_obj}{A list returned by FCSimple::fcs_join() and FCSimple::fcs_reduce_dimensions(),
containing at minimum:  
- `data`: numeric matrix of events × channels  
- `source`: sample identifier vector  
- `umap` or `tsne` element with `$coordinates` (cells × 2)}

\item{reduction_cluster_annotate_algorithm}{Character; clustering result to use when highlighting kept islands on the
embedding. One of `"leiden"`, `"flowsom"`, `"louvain"`, or `"phenograph"`.  
Default uses the first value.}

\item{dbscan_reduction}{Character; which reduction to run DBSCAN on. Either `"umap"` (default) or
`"tsne"`. Must match a named element in `fcs_join_obj`.}

\item{dbscan_minpts}{Integer; minimum points per DBSCAN cluster (`minPts`). Default 50.}

\item{dbscan_eps}{Numeric; epsilon neighborhood radius for DBSCAN. Default 0.5.}

\item{dbscan_lineage}{Character vector of channel names to include in the island heatmap (e.g.
lineage markers). Default `c("170Yb_CD3","165Ho_CD19","145Nd_CD4","146Nd_CD8")`.  
If `NULL`, uses all channels.}

\item{outdir}{Character; path to an existing directory where intermediate heatmaps and
plots will be saved. Defaults to the working directory.}
}
\value{
A list with elements:  
  - `data`: numeric matrix of the selected events × channels  
  - `source`: character vector of sample IDs for selected events  
  - `run_date`: character vector of acquisition dates (if available)  
  - `subset_cells`: integer indices of the retained cells
}
\description{
Performs density-based clustering (DBSCAN) on a UMAP or tSNE embedding,  
  renders a heatmap of cluster “islands” over selected lineage markers,  
  prompts the user to pick which islands to retain, and highlights those  
  cells on the original embedding. Finally returns a pared-down analysis  
  object containing only the selected events.
}
\details{
1. Selects the specified embedding (`umap` or `tsne`) and if there are  
     more than 500,000 cells, randomly samples 500,000 for DBSCAN and uses  
     k-NN to classify the remainder.  
  2. Runs `dbscan::dbscan()` with `eps = dbscan_eps` and `minPts = dbscan_minpts`.  
  3. Builds a temporary FCSimple object containing only the DBSCAN clusters  
     and (optionally) the `dbscan_lineage` channels.  
  4. Calls `fcs_cluster_heatmap()` + `fcs_plot_heatmap()` on this object to  
     display median expression of each DBSCAN island.  
  5. Prompts the user via `readline()` to enter comma-separated cluster IDs  
     to keep.  
  6. Calls `fcs_plot_reduction()` with `internal_call = TRUE` to highlight  
     the selected events on the original embedding, colored by  
     `reduction_cluster_annotate_algorithm`.  
  7. Returns a pared object (list) with:  
     - `data`: the original expression matrix subset to kept rows  
     - `source`: subset of the `source` vector  
     - `run_date` (if present) subset to kept rows  
     - `subset_cells`: integer indices of kept events
}
\examples{
 
\dontrun{  
  # Perform UMAP reduction first  
  joined <- FCSimple::fcs_join(files)  
  reduced <- FCSimple::fcs_reduce_dimensions(joined, algorithm = "umap")  
 
  # Launch interactive island selector  
  sel <- FCSimple::fcs_select_islands(  
    reduced,  
    reduction_cluster_annotate_algorithm = "leiden",  
    dbscan_reduction   = "umap",  
    dbscan_minpts      = 40,  
    dbscan_eps         = 0.4,  
    dbscan_lineage     = c("CD3","CD19","CD4","CD8"),  
    outdir             = "~/my_analysis/plots"  
  )  
  # sel$data, sel$source, sel$run_date, sel$subset_cells  
}  
 
}
\seealso{
dbscan::dbscan, FNN::knn,  
  FCSimple::fcs_cluster_heatmap, FCSimple::fcs_plot_heatmap,  
  FCSimple::fcs_plot_reduction
}
